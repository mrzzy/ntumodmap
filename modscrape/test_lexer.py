#
# Modscrape
# Tests
# Lexer
#

from lexer import lex
from tok import Token, TokenType


def test_lexer():
    actual = lex(
        """CZ2007 	INTRODUCTION TO DATABASES 	3.0 AU
    Prerequisite: 	CZ1007 & CZ2001(Corequisite) OR
        CE1007 & CE2001(Corequisite) OR
        CE1007 & CZ2001(Corequisite) OR
        CE2001(Corequisite) & CZ1007 OR
        CE2101(Corequisite) OR
        CZ2101(Corequisite)
    Mutually exclusive with: 	EE4791, IE4791, IM4791, SC2207
    Not available to Programme: 	BCE, BCG
    Not available to all Programme with: 	(Admyr 2021-onwards)
    Not available as PE to Programme: 	REP(ASEN), REP(BIE), REP(CBE), REP(CE), REP(CVEN), REP(EEE), REP(ENE), REP(MAT), REP(ME)
    Not offered as Broadening and Deepening Elective
    Overview of Database Management Systems (DBMS); Entity-Relationship Data Model; Relational Data Model; Functional Dependencies (FD) and Normalization; Relational Algebra; Structured Query Language (SQL); Storage of Relational Data; Indexing Techniques; Query Processing and Optimization; Transaction Management and Concurrency Control""".splitlines()
    )

    expected = [
        [
            Token(TokenType.MODULE_CODE, "CZ2007"),
            Token(TokenType.IDENTIFIER, "INTRODUCTION"),
            Token(TokenType.IDENTIFIER, "TO"),
            Token(TokenType.IDENTIFIER, "DATABASES"),
            Token(TokenType.NUMBER, "3"),
            Token(TokenType.DOT, "."),
            Token(TokenType.NUMBER, "0"),
            Token(TokenType.AU, "AU"),
        ],
        [
            Token(TokenType.PREREQ, "Prerequisite"),
            Token(TokenType.COLON, ":"),
            Token(TokenType.MODULE_CODE, "CZ1007"),
            Token(TokenType.AND, "&"),
            Token(TokenType.MODULE_CODE, "CZ2001"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.COREQ, "Corequisite"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.OR, "OR"),
        ],
        [
            Token(TokenType.MODULE_CODE, "CE1007"),
            Token(TokenType.AND, "&"),
            Token(TokenType.MODULE_CODE, "CE2001"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.COREQ, "Corequisite"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.OR, "OR"),
        ],
        [
            Token(TokenType.MODULE_CODE, "CE1007"),
            Token(TokenType.AND, "&"),
            Token(TokenType.MODULE_CODE, "CZ2001"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.COREQ, "Corequisite"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.OR, "OR"),
        ],
        [
            Token(TokenType.MODULE_CODE, "CE2001"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.COREQ, "Corequisite"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.AND, "&"),
            Token(TokenType.MODULE_CODE, "CZ1007"),
            Token(TokenType.OR, "OR"),
        ],
        [
            Token(TokenType.MODULE_CODE, "CE2101"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.COREQ, "Corequisite"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.OR, "OR"),
        ],
        [
            Token(TokenType.MODULE_CODE, "CZ2101"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.COREQ, "Corequisite"),
            Token(TokenType.RPAREN, ")"),
        ],
        [
            Token(TokenType.IDENTIFIER, "Mutually"),
            Token(TokenType.IDENTIFIER, "exclusive"),
            Token(TokenType.IDENTIFIER, "with"),
            Token(TokenType.COLON, ":"),
            Token(TokenType.MODULE_CODE, "EE4791"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.MODULE_CODE, "IE4791"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.MODULE_CODE, "IM4791"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.MODULE_CODE, "SC2207"),
        ],
        [
            Token(TokenType.IDENTIFIER, "Not"),
            Token(TokenType.IDENTIFIER, "available"),
            Token(TokenType.IDENTIFIER, "to"),
            Token(TokenType.IDENTIFIER, "Programme"),
            Token(TokenType.COLON, ":"),
            Token(TokenType.IDENTIFIER, "BCE"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.IDENTIFIER, "BCG"),
        ],
        [
            Token(TokenType.IDENTIFIER, "Not"),
            Token(TokenType.IDENTIFIER, "available"),
            Token(TokenType.IDENTIFIER, "to"),
            Token(TokenType.IDENTIFIER, "all"),
            Token(TokenType.IDENTIFIER, "Programme"),
            Token(TokenType.IDENTIFIER, "with"),
            Token(TokenType.COLON, ":"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "Admyr"),
            Token(TokenType.NUMBER, "2021"),
            Token(TokenType.DASH, "-"),
            Token(TokenType.IDENTIFIER, "onwards"),
            Token(TokenType.RPAREN, ")"),
        ],
        [
            Token(TokenType.IDENTIFIER, "Not"),
            Token(TokenType.IDENTIFIER, "available"),
            Token(TokenType.IDENTIFIER, "as"),
            Token(TokenType.IDENTIFIER, "PE"),
            Token(TokenType.IDENTIFIER, "to"),
            Token(TokenType.IDENTIFIER, "Programme"),
            Token(TokenType.COLON, ":"),
            Token(TokenType.IDENTIFIER, "REP"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "ASEN"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.IDENTIFIER, "REP"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "BIE"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.IDENTIFIER, "REP"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "CBE"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.IDENTIFIER, "REP"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "CE"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.IDENTIFIER, "REP"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "CVEN"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.IDENTIFIER, "REP"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "EEE"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.IDENTIFIER, "REP"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "ENE"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.IDENTIFIER, "REP"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "MAT"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.COMMA, ","),
            Token(TokenType.IDENTIFIER, "REP"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "ME"),
            Token(TokenType.RPAREN, ")"),
        ],
        [
            Token(TokenType.IDENTIFIER, "Not"),
            Token(TokenType.IDENTIFIER, "offered"),
            Token(TokenType.IDENTIFIER, "as"),
            Token(TokenType.IDENTIFIER, "Broadening"),
            Token(TokenType.IDENTIFIER, "and"),
            Token(TokenType.IDENTIFIER, "Deepening"),
            Token(TokenType.IDENTIFIER, "Elective"),
        ],
        [
            Token(TokenType.IDENTIFIER, "Overview"),
            Token(TokenType.IDENTIFIER, "of"),
            Token(TokenType.IDENTIFIER, "Database"),
            Token(TokenType.IDENTIFIER, "Management"),
            Token(TokenType.IDENTIFIER, "Systems"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "DBMS"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.SEMICOLON, ";"),
            Token(TokenType.IDENTIFIER, "Entity"),
            Token(TokenType.DASH, "-"),
            Token(TokenType.IDENTIFIER, "Relationship"),
            Token(TokenType.IDENTIFIER, "Data"),
            Token(TokenType.IDENTIFIER, "Model"),
            Token(TokenType.SEMICOLON, ";"),
            Token(TokenType.IDENTIFIER, "Relational"),
            Token(TokenType.IDENTIFIER, "Data"),
            Token(TokenType.IDENTIFIER, "Model"),
            Token(TokenType.SEMICOLON, ";"),
            Token(TokenType.IDENTIFIER, "Functional"),
            Token(TokenType.IDENTIFIER, "Dependencies"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "FD"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.IDENTIFIER, "and"),
            Token(TokenType.IDENTIFIER, "Normalization"),
            Token(TokenType.SEMICOLON, ";"),
            Token(TokenType.IDENTIFIER, "Relational"),
            Token(TokenType.IDENTIFIER, "Algebra"),
            Token(TokenType.SEMICOLON, ";"),
            Token(TokenType.IDENTIFIER, "Structured"),
            Token(TokenType.IDENTIFIER, "Query"),
            Token(TokenType.IDENTIFIER, "Language"),
            Token(TokenType.LPAREN, "("),
            Token(TokenType.IDENTIFIER, "SQL"),
            Token(TokenType.RPAREN, ")"),
            Token(TokenType.SEMICOLON, ";"),
            Token(TokenType.IDENTIFIER, "Storage"),
            Token(TokenType.IDENTIFIER, "of"),
            Token(TokenType.IDENTIFIER, "Relational"),
            Token(TokenType.IDENTIFIER, "Data"),
            Token(TokenType.SEMICOLON, ";"),
            Token(TokenType.IDENTIFIER, "Indexing"),
            Token(TokenType.IDENTIFIER, "Techniques"),
            Token(TokenType.SEMICOLON, ";"),
            Token(TokenType.IDENTIFIER, "Query"),
            Token(TokenType.IDENTIFIER, "Processing"),
            Token(TokenType.IDENTIFIER, "and"),
            Token(TokenType.IDENTIFIER, "Optimization"),
            Token(TokenType.SEMICOLON, ";"),
            Token(TokenType.IDENTIFIER, "Transaction"),
            Token(TokenType.IDENTIFIER, "Management"),
            Token(TokenType.IDENTIFIER, "and"),
            Token(TokenType.IDENTIFIER, "Concurrency"),
            Token(TokenType.IDENTIFIER, "Control"),
        ],
    ]
    assert actual == expected
